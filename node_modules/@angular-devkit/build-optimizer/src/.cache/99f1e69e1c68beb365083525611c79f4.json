{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\sidebar\\components\\sidebar.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\sidebar\\components\\sidebar.js","mtime":1521243577000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, HostBinding, Input, Output, Renderer2, ElementRef } from \"@angular/core\";\nimport { SidebarService, SidebarTransition, SidebarDirection } from \"../services/sidebar.service\";\nvar SuiSidebar = /*@__PURE__*/ (function () {\n    function SuiSidebar(_renderer, _element) {\n        var _this = this;\n        this._renderer = _renderer;\n        this._element = _element;\n        this.service = new SidebarService();\n        // We set the default here as well to force the classes to update.\n        this.transition = SidebarTransition.Uncover;\n        this.direction = SidebarDirection.Left;\n        setTimeout(function () { return _this.updateDimensions(); });\n        this.service.isVisibleChange.subscribe(function () { return _this.updateDimensions(); });\n        this._sidebarClasses = true;\n    }\n    Object.defineProperty(SuiSidebar.prototype, \"transition\", {\n        get: function () {\n            return this.service.transition;\n        },\n        set: function (transition) {\n            var _this = this;\n            this.service.transition.split(\" \").forEach(function (c) { return _this.setClass(c, false); });\n            this.service.transition = transition;\n            this.service.transition.split(\" \").forEach(function (c) { return _this.setClass(c, true); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSidebar.prototype, \"direction\", {\n        get: function () {\n            return this.service.direction;\n        },\n        set: function (direction) {\n            this.setClass(this.service.direction, false);\n            this.service.direction = direction;\n            this.setClass(this.service.direction, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSidebar.prototype, \"isVisible\", {\n        get: function () {\n            return this.service.isVisible;\n        },\n        set: function (isVisible) {\n            this.service.setVisibleState(isVisible);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSidebar.prototype, \"isVisibleChange\", {\n        get: function () {\n            return this.service.isVisibleChange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSidebar.prototype, \"isAnimating\", {\n        get: function () {\n            return this.service.isAnimating;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiSidebar.prototype.updateDimensions = function () {\n        this.service.width = this._element.nativeElement.offsetWidth;\n        this.service.height = this._element.nativeElement.offsetHeight;\n    };\n    SuiSidebar.prototype.setClass = function (className, isAdd) {\n        if (isAdd === void 0) {\n            isAdd = true;\n        }\n        if (isAdd) {\n            this._renderer.addClass(this._element.nativeElement, className);\n        }\n        else {\n            this._renderer.removeClass(this._element.nativeElement, className);\n        }\n    };\n    SuiSidebar.prototype.open = function () {\n        this.service.setVisibleState(true);\n    };\n    SuiSidebar.prototype.close = function () {\n        this.service.setVisibleState(false);\n    };\n    SuiSidebar.prototype.toggle = function () {\n        this.service.toggleVisibleState();\n    };\n    return SuiSidebar;\n}());\nexport { SuiSidebar };\n//# sourceMappingURL=sidebar.js.map \n",null]}