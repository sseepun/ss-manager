{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\dropdown\\directives\\dropdown-menu.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\dropdown\\directives\\dropdown-menu.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Directive, ContentChild, forwardRef, Renderer2, ElementRef, ContentChildren, Input, HostListener, ChangeDetectorRef } from \"@angular/core\";\nimport { Transition, SuiTransition, TransitionController, TransitionDirection } from \"../../transition/index\";\nimport { KeyCode } from \"../../../misc/util/index\";\nimport { DropdownAutoCloseType } from \"../services/dropdown.service\";\nimport \"element-closest\";\nvar SuiDropdownMenuItem = /*@__PURE__*/ (function () {\n    function SuiDropdownMenuItem(_renderer, element) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.isSelected = false;\n        this.selectedClass = \"selected\";\n    }\n    Object.defineProperty(SuiDropdownMenuItem.prototype, \"isDisabled\", {\n        get: function () {\n            // We must use nativeElement as Angular doesn't have a way of reading class information.\n            var element = this.element.nativeElement;\n            return element.classList.contains(\"disabled\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdownMenuItem.prototype, \"isSelected\", {\n        get: function () {\n            return this._isSelected;\n        },\n        set: function (value) {\n            // Renderer is used to enable a dynamic class name.\n            if (value) {\n                this._renderer.addClass(this.element.nativeElement, this.selectedClass);\n            }\n            else {\n                this._renderer.removeClass(this.element.nativeElement, this.selectedClass);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdownMenuItem.prototype, \"hasChildDropdown\", {\n        get: function () {\n            return !!this.childDropdownMenu;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiDropdownMenuItem.prototype.performClick = function () {\n        // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.\n        this.element.nativeElement.click();\n    };\n    return SuiDropdownMenuItem;\n}());\nexport { SuiDropdownMenuItem };\nvar SuiDropdownMenu = /*@__PURE__*/ (function (_super) {\n    __extends(SuiDropdownMenu, _super);\n    function SuiDropdownMenu(renderer, element, changeDetector) {\n        var _this = _super.call(this, renderer, element, changeDetector) || this;\n        _this.element = element;\n        // Initialise transition functionality.\n        // Initialise transition functionality.\n        _this._transitionController = new TransitionController(false);\n        _this.setTransitionController(_this._transitionController);\n        _this.menuTransition = \"slide down\";\n        _this.menuTransitionDuration = 200;\n        _this.menuAutoSelectFirst = false;\n        _this.menuSelectedItemClass = \"selected\";\n        _this._documentKeyDownListener = renderer.listen(\"document\", \"keydown\", function (e) { return _this.onDocumentKeyDown(e); });\n        return _this;\n    }\n    Object.defineProperty(SuiDropdownMenu.prototype, \"service\", {\n        get: function () {\n            return this._service;\n        },\n        set: function (value) {\n            var _this = this;\n            this._service = value;\n            var previousIsOpen = this._service.isOpen;\n            this._service.isOpenChange.subscribe(function (isOpen) {\n                if (isOpen !== previousIsOpen) {\n                    // Only run transitions if the open state has changed.\n                    // Only run transitions if the open state has changed.\n                    _this._transitionController.stopAll();\n                    _this._transitionController.animate(new Transition(_this.menuTransition, _this.menuTransitionDuration, TransitionDirection.Either, function () { return _this._service.isAnimating = false; }));\n                }\n                if (!isOpen) {\n                    // Reset the item selections when a nested item is selected to avoid incosistent open states.\n                    if (_this.selectedItems.length > 1) {\n                        _this.resetSelection();\n                    }\n                }\n                previousIsOpen = isOpen;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdownMenu.prototype, \"items\", {\n        set: function (items) {\n            this._itemsQueryOverride = items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdownMenu.prototype, \"_itemsQuery\", {\n        get: function () {\n            return this._itemsQueryOverride || this._itemsQueryInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdownMenu.prototype, \"_items\", {\n        // Get the list of items, ignoring those that are disabled.\n        get: \n        // Get the list of items, ignoring those that are disabled.\n        function () {\n            return this._itemsQuery.filter(function (i) { return !i.isDisabled; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiDropdownMenu.prototype.onClick = function (e) {\n        if (!e.eventHandled) {\n            e.eventHandled = true;\n            if (this._service.autoCloseMode === DropdownAutoCloseType.ItemClick) {\n                var target = e.target;\n                if (this.element.nativeElement.contains(target.closest(\".item\")) && !/input|textarea/i.test(target.tagName)) {\n                    // Once an item is selected, we can close the entire dropdown.\n                    this._service.setOpenState(false, true);\n                }\n            }\n        }\n    };\n    SuiDropdownMenu.prototype.onDocumentKeyDown = function (e) {\n        // Only the root dropdown (i.e. not nested dropdowns) is responsible for keeping track of the currently selected item.\n        if (this._service.isOpen && !this._service.isNested) {\n            // Stop document events like scrolling while open.\n            var target = e.target;\n            if (!/input/i.test(target.tagName) &&\n                [KeyCode.Escape, KeyCode.Enter, KeyCode.Up, KeyCode.Down, KeyCode.Left, KeyCode.Right].find(function (kC) { return kC === e.keyCode; })) {\n                e.preventDefault();\n            }\n            // Gets the top selected item from the stack.\n            var selected = this.selectedItems.slice(-1)[0];\n            // Keeping track of the menu containing the currently selected element allows us to easily determine its siblings.\n            var selectedContainer = this;\n            if (this.selectedItems.length >= 2) {\n                var selectedParent = this.selectedItems.slice(-2)[0];\n                selectedContainer = selectedParent.childDropdownMenu;\n            }\n            switch (e.keyCode) {\n                // Escape : close the entire dropdown.\n                case KeyCode.Escape: {\n                    this._service.setOpenState(false);\n                    break;\n                }\n                // Down : select the next item below the current one, or the 1st if none selected.\n                case KeyCode.Down:\n                // Up : select the next item above the current one, or the 1st if none selected.\n                case KeyCode.Up: {\n                    this.selectedItems.pop();\n                    this.selectedItems.push(selectedContainer.updateSelection(selected, e.keyCode));\n                    // Prevent default regardless of whether we are in an input, to stop jumping to the start or end of the query string.\n                    e.preventDefault();\n                    break;\n                }\n                // Enter : if the item doesn't contain a nested dropdown, 'click' it. Otherwise, fall through to 'Right' action.\n                case KeyCode.Enter: {\n                    if (selected && !selected.hasChildDropdown) {\n                        selected.performClick();\n                        break;\n                    }\n                }\n                // falls through\n                // Right : if the selected item contains a nested dropdown, open the dropdown & select the 1st item.\n                case KeyCode.Right: {\n                    if (selected && selected.hasChildDropdown) {\n                        selected.childDropdownMenu.service.setOpenState(true);\n                        this.selectedItems.push(selected.childDropdownMenu.updateSelection(selected, e.keyCode));\n                    }\n                    break;\n                }\n                // Left : if the selected item is in a nested dropdown, close it and select the containing item.\n                case KeyCode.Left: {\n                    if (this.selectedItems.length >= 2) {\n                        this.selectedItems.pop();\n                        var selectedParent = this.selectedItems.slice(-1)[0];\n                        selectedParent.childDropdownMenu.service.setOpenState(false);\n                        selectedParent.isSelected = true;\n                    }\n                    break;\n                }\n            }\n        }\n    };\n    SuiDropdownMenu.prototype.resetSelection = function () {\n        var _this = this;\n        this.selectedItems = [];\n        this._items.forEach(function (i) {\n            i.selectedClass = _this.menuSelectedItemClass;\n            i.isSelected = false;\n        });\n        if (this.menuAutoSelectFirst && this._items.length > 0) {\n            // Autoselect 1st item if required & possible.\n            this._items[0].isSelected = true;\n            this.scrollToItem(this._items[0]);\n            this.selectedItems.push(this._itemsQuery.first);\n        }\n    };\n    // Determines the item to next be selected, based on the keyboard input & the currently selected item.\n    // Determines the item to next be selected, based on the keyboard input & the currently selected item.\n    SuiDropdownMenu.prototype.updateSelection =\n        // Determines the item to next be selected, based on the keyboard input & the currently selected item.\n        function (selectedItem, keyCode) {\n            if (selectedItem) {\n                // Remove the selected status on the previously selected item.\n                selectedItem.isSelected = false;\n            }\n            var selectedIndex = this._items\n                .findIndex(function (i) { return i === selectedItem; });\n            var newSelection;\n            switch (keyCode) {\n                case KeyCode.Enter:\n                case KeyCode.Right:\n                case KeyCode.Down:\n                    selectedIndex += 1;\n                    break;\n                case KeyCode.Up:\n                    if (selectedIndex === -1) {\n                        // If none are selected, select the 1st item. Should this be `this.items.last - 1`?\n                        selectedIndex = 0;\n                        break;\n                    }\n                    selectedIndex -= 1;\n                    break;\n            }\n            // Select the item at the updated index. The || is to stop us selecting past the start or end of the item list.\n            newSelection = this._items[selectedIndex] || selectedItem;\n            if (newSelection) {\n                // Set the selected status on the newly selected item.\n                newSelection.isSelected = true;\n                // Set the current scroll position to the location of the newly selected item.\n                this.scrollToItem(newSelection);\n            }\n            return newSelection;\n        };\n    SuiDropdownMenu.prototype.scrollToItem = function (item) {\n        var menu = this.element.nativeElement;\n        var selectedRect = item.element.nativeElement.getBoundingClientRect();\n        var menuRect = menu.getBoundingClientRect();\n        var scrollAmount = 0;\n        if (selectedRect.bottom > menuRect.bottom) {\n            scrollAmount = selectedRect.bottom - menuRect.bottom;\n        }\n        if (selectedRect.top < menuRect.top) {\n            scrollAmount = selectedRect.top - menuRect.top;\n        }\n        menu.scrollTop += Math.round(scrollAmount);\n    };\n    SuiDropdownMenu.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.onItemsChanged();\n        this._itemsQuery.changes.subscribe(function () { return _this.onItemsChanged(); });\n    };\n    SuiDropdownMenu.prototype.onItemsChanged = function () {\n        // We use `_items` rather than `items` in case one or more have become disabled.\n        this.resetSelection();\n    };\n    SuiDropdownMenu.prototype.ngOnDestroy = function () {\n        this._documentKeyDownListener();\n    };\n    return SuiDropdownMenu;\n}(SuiTransition));\nexport { SuiDropdownMenu };\n//# sourceMappingURL=dropdown-menu.js.map \n",null]}