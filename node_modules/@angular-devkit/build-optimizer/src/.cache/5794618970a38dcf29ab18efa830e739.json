{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\views\\calendar-view.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\views\\calendar-view.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Input, ViewChildren } from \"@angular/core\";\nimport { KeyCode } from \"../../../misc/util/index\";\nimport { SuiCalendarItem } from \"../directives/calendar-item\";\nexport var CalendarViewType = /*@__PURE__*/ (function (CalendarViewType) {\n    CalendarViewType[CalendarViewType[\"Year\"] = 0] = \"Year\";\n    CalendarViewType[CalendarViewType[\"Month\"] = 1] = \"Month\";\n    CalendarViewType[CalendarViewType[\"Date\"] = 2] = \"Date\";\n    CalendarViewType[CalendarViewType[\"Hour\"] = 3] = \"Hour\";\n    CalendarViewType[CalendarViewType[\"Minute\"] = 4] = \"Minute\";\n    return CalendarViewType;\n})({});\nvar CalendarView = /*@__PURE__*/ (function () {\n    function CalendarView(renderer, viewType, ranges) {\n        var _this = this;\n        this._type = viewType;\n        this.ranges = ranges;\n        this._documentKeyDownListener = renderer.listen(\"document\", \"keydown\", function (e) { return _this.onDocumentKeyDown(e); });\n    }\n    Object.defineProperty(CalendarView.prototype, \"service\", {\n        get: function () {\n            return this._service;\n        },\n        set: function (service) {\n            var _this = this;\n            this._service = service;\n            this.ranges.loadService(service);\n            this.service.onManualUpdate = function () {\n                _this.ranges.refresh();\n                delete _this._highlightedItem;\n                _this.autoHighlight();\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarView.prototype, \"currentDate\", {\n        get: function () {\n            return this.service.currentDate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarView.prototype, \"selectedDate\", {\n        get: function () {\n            return this.service.selectedDate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Template Methods\n    // Template Methods\n    CalendarView.prototype.setDate =\n        // Template Methods\n        function (item) {\n            this.service.changeDate(item.date, this._type);\n        };\n    CalendarView.prototype.zoomOut = function () {\n        this.service.zoomOut(this._type);\n    };\n    // Keyboard Control\n    // Keyboard Control\n    CalendarView.prototype.ngAfterViewInit =\n        // Keyboard Control\n        function () {\n            var _this = this;\n            this._renderedItems.changes.subscribe(function () { return _this.onRenderedItemsChanged(); });\n            this.onRenderedItemsChanged();\n        };\n    CalendarView.prototype.onRenderedItemsChanged = function () {\n        var _this = this;\n        this._renderedItems.forEach(function (i) {\n            return i.onFocussed.subscribe(function (hasFocus) {\n                if (hasFocus) {\n                    _this.highlightItem(i.item);\n                }\n            });\n        });\n        this.autoHighlight();\n        this.highlightItem(this._highlightedItem);\n    };\n    CalendarView.prototype.autoHighlight = function () {\n        var _this = this;\n        var date = this.selectedDate && this.ranges.current.containsDate(this.selectedDate) ? this.selectedDate : this.currentDate;\n        if (this._highlightedItem && this.ranges.current.containsDate(this._highlightedItem.date)) {\n            date = this._highlightedItem.date;\n        }\n        var initiallyHighlighted = this.ranges.current.items.find(function (i) { return _this.ranges.dateComparer.equal(i.date, date); });\n        if (initiallyHighlighted && !initiallyHighlighted.isDisabled) {\n            this._highlightedItem = initiallyHighlighted;\n        }\n    };\n    CalendarView.prototype.highlightItem = function (item) {\n        if (item) {\n            this._renderedItems.forEach(function (i) { return i.hasFocus = false; });\n            var rendered = this._renderedItems.find(function (ri) { return ri.item === item; });\n            if (rendered && !rendered.hasFocus) {\n                rendered.hasFocus = true;\n                rendered.changeDetector.detectChanges();\n            }\n            this._highlightedItem = item;\n        }\n    };\n    CalendarView.prototype.onDocumentKeyDown = function (e) {\n        if (this._highlightedItem && e.keyCode === KeyCode.Enter) {\n            this.setDate(this._highlightedItem);\n            return;\n        }\n        if (!this._highlightedItem) {\n            this.autoHighlight();\n        }\n        var index = this.ranges.current.findIndex(this._highlightedItem);\n        var isMovingForward = true;\n        var delta = 0;\n        switch (e.keyCode) {\n            case KeyCode.Right:\n                delta += 1;\n                break;\n            case KeyCode.Left:\n                delta -= 1;\n                isMovingForward = false;\n                break;\n            case KeyCode.Down:\n                delta += this.ranges.columns;\n                break;\n            case KeyCode.Up:\n                delta -= this.ranges.columns;\n                isMovingForward = false;\n                break;\n            default:\n                return;\n        }\n        // Stop these keypresses being captured elsewhere.\n        e.preventDefault();\n        var nextItem = this.ranges.current.items[index + delta];\n        if (nextItem && nextItem.isDisabled) {\n            return;\n        }\n        if (nextItem && !nextItem.isOutsideRange) {\n            return this.highlightItem(nextItem);\n        }\n        if (nextItem && nextItem.isOutsideRange) {\n            if (index + delta >= this.ranges.current.inRange.length) {\n                isMovingForward = true;\n            }\n        }\n        if (!nextItem) {\n            var adjustedIndex = this.ranges.current.findIndex(this._highlightedItem);\n            var nextItems = this.ranges.calc(isMovingForward).inRange;\n            if (isMovingForward) {\n                adjustedIndex -= this.ranges.current.inRange.length;\n            }\n            else {\n                adjustedIndex += nextItems.length;\n            }\n            nextItem = nextItems[adjustedIndex + delta];\n            if (nextItem.isDisabled) {\n                return;\n            }\n        }\n        this.ranges.move(isMovingForward);\n        this._highlightedItem = this.ranges.current.find(nextItem);\n    };\n    CalendarView.prototype.ngOnDestroy = function () {\n        this._documentKeyDownListener();\n    };\n    return CalendarView;\n}());\nexport { CalendarView };\n//# sourceMappingURL=calendar-view.js.map \n",null]}