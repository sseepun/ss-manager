{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\popup\\components\\popup.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\popup\\components\\popup.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ViewChild, ViewContainerRef, ElementRef, EventEmitter, HostListener, HostBinding } from \"@angular/core\";\nimport { PositioningService } from \"../../../misc/util/index\";\nimport { TransitionController, TransitionDirection, Transition } from \"../../transition/index\";\nvar SuiPopup = /*@__PURE__*/ (function () {\n    function SuiPopup(elementRef) {\n        this.elementRef = elementRef;\n        this.transitionController = new TransitionController(false);\n        this._isOpen = false;\n        this.onOpen = new EventEmitter();\n        this.onClose = new EventEmitter();\n        this._tabindex = 0;\n    }\n    Object.defineProperty(SuiPopup.prototype, \"isOpen\", {\n        get: function () {\n            return this._isOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiPopup.prototype, \"anchor\", {\n        set: function (anchor) {\n            // Whenever the anchor is set (which is when the popup is created), recreate the positioning service with the appropriate options.\n            this.positioningService = new PositioningService(anchor, this._container.element, this.config.placement, \".dynamic.arrow\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiPopup.prototype, \"direction\", {\n        // Returns the direction (`top`, `left`, `right`, `bottom`) of the current placement.\n        get: \n        // Returns the direction (`top`, `left`, `right`, `bottom`) of the current placement.\n        function () {\n            if (this.positioningService) {\n                return this.positioningService.actualPlacement.split(\" \").shift();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiPopup.prototype, \"alignment\", {\n        // Returns the alignment (`top`, `left`, `right`, `bottom`) of the current placement.\n        get: \n        // Returns the alignment (`top`, `left`, `right`, `bottom`) of the current placement.\n        function () {\n            if (this.positioningService) {\n                return this.positioningService.actualPlacement.split(\" \").pop();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiPopup.prototype, \"dynamicClasses\", {\n        get: function () {\n            var classes = {};\n            if (this.direction) {\n                classes[this.direction] = true;\n            }\n            if (this.alignment) {\n                classes[this.alignment] = true;\n            }\n            if (this.config.isInverted) {\n                classes.inverted = true;\n            }\n            if (this.config.isBasic) {\n                classes.basic = true;\n            }\n            return classes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiPopup.prototype.open = function () {\n        var _this = this;\n        // Only attempt to open if currently closed.\n        if (!this.isOpen) {\n            // Cancel the closing timer.\n            clearTimeout(this.closingTimeout);\n            // Cancel all other transitions, and initiate the opening transition.\n            this.transitionController.stopAll();\n            this.transitionController.animate(new Transition(this.config.transition, this.config.transitionDuration, TransitionDirection.In, function () {\n                // Focus any element with [autofocus] attribute.\n                var autoFocus = _this.elementRef.nativeElement.querySelector(\"[autofocus]\");\n                if (autoFocus) {\n                    // Autofocus after the browser has had time to process other event handlers.\n                    setTimeout(function () { return autoFocus.focus(); }, 10);\n                    // Try to focus again when the modal has opened so that autofocus works in IE11.\n                    setTimeout(function () { return autoFocus.focus(); }, _this.config.transitionDuration);\n                }\n            }));\n            // Refresh the popup position after a brief delay to allow for browser processing time.\n            this.positioningService.placement = this.config.placement;\n            setTimeout(function () { return _this.positioningService.update(); });\n            // Finally, set the popup to be open.\n            this._isOpen = true;\n            this.onOpen.emit();\n        }\n    };\n    SuiPopup.prototype.toggle = function () {\n        if (!this.isOpen) {\n            return this.open();\n        }\n        return this.close();\n    };\n    SuiPopup.prototype.close = function () {\n        var _this = this;\n        // Only attempt to close if currently open.\n        if (this.isOpen) {\n            // Cancel all other transitions, and initiate the closing transition.\n            this.transitionController.stopAll();\n            this.transitionController.animate(new Transition(this.config.transition, this.config.transitionDuration, TransitionDirection.Out));\n            // Cancel the closing timer.\n            clearTimeout(this.closingTimeout);\n            // Start the closing timer, that fires the `onClose` event after the transition duration number of milliseconds.\n            this.closingTimeout = window.setTimeout(function () { return _this.onClose.emit(); }, this.config.transitionDuration);\n            // Finally, set the popup to be closed.\n            this._isOpen = false;\n        }\n    };\n    SuiPopup.prototype.onClick = function (event) {\n        // Makes sense here, as the popup shouldn't be attached to any DOM element.\n        event.stopPropagation();\n    };\n    return SuiPopup;\n}());\nexport { SuiPopup };\n//# sourceMappingURL=popup.js.map \n",null]}