{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\services\\calendar-range.service.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\services\\calendar-range.service.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { DateUtil, Util } from \"../../../misc/util/index\";\r\nimport { CalendarItem } from \"../directives/calendar-item\";\r\nimport { DateComparer } from \"../classes/date-comparer\";\r\nvar CalendarRange = /*@__PURE__*/ (function () {\r\n    function CalendarRange(start, dates, items, grouped, comparer) {\r\n        this.start = start;\r\n        this.dates = dates;\r\n        this.items = items;\r\n        this.groupedItems = grouped;\r\n        this._comparer = comparer;\r\n    }\r\n    Object.defineProperty(CalendarRange.prototype, \"inRange\", {\r\n        get: function () {\r\n            return this.items.filter(function (i) { return !i.isOutsideRange; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CalendarRange.prototype.find = function (item) {\r\n        var _this = this;\r\n        return this.items.find(function (i) { return _this._comparer.equal(i.date, item.date); });\r\n    };\r\n    CalendarRange.prototype.findIndex = function (item) {\r\n        var _this = this;\r\n        if (!item) {\r\n            return -1;\r\n        }\r\n        return this.items.findIndex(function (i) { return _this._comparer.equal(i.date, item.date); });\r\n    };\r\n    CalendarRange.prototype.containsDate = function (date) {\r\n        var _this = this;\r\n        return !!this.inRange.find(function (i) { return _this._comparer.equal(i.date, date); });\r\n    };\r\n    return CalendarRange;\r\n}());\r\nexport { CalendarRange };\r\nvar CalendarRangeService = /*@__PURE__*/ (function () {\r\n    function CalendarRangeService(interval, rows, columns) {\r\n        this.interval = interval;\r\n        this.marginal = interval + 1;\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n    }\r\n    Object.defineProperty(CalendarRangeService.prototype, \"dateComparer\", {\r\n        get: function () {\r\n            return new DateComparer(this.marginal, this.service.inFinalView);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarRangeService.prototype, \"length\", {\r\n        get: function () {\r\n            return this.rows * this.columns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarRangeService.prototype, \"canMoveNext\", {\r\n        get: function () {\r\n            var firstItem = this.next.inRange[0];\r\n            if (firstItem && this.service.maxDate) {\r\n                return firstItem.date <= this.service.maxDate;\r\n            }\r\n            return true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarRangeService.prototype, \"canMovePrevious\", {\r\n        get: function () {\r\n            var lastItem = this.previous.inRange.slice(-1).pop();\r\n            if (lastItem && this.service.minDate) {\r\n                return lastItem.date >= this.service.minDate;\r\n            }\r\n            return true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CalendarRangeService.prototype.loadService = function (service) {\r\n        this.service = service;\r\n        this.refresh();\r\n    };\r\n    CalendarRangeService.prototype.refresh = function () {\r\n        this.current = this.calcRange(this.service.currentDate);\r\n        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));\r\n        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));\r\n    };\r\n    CalendarRangeService.prototype.move = function (forwards) {\r\n        if (forwards) {\r\n            return this.moveNext();\r\n        }\r\n        return this.movePrevious();\r\n    };\r\n    CalendarRangeService.prototype.moveNext = function () {\r\n        DateUtil.next(this.interval, this.service.currentDate);\r\n        this.previous = this.current;\r\n        this.current = this.next;\r\n        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));\r\n    };\r\n    CalendarRangeService.prototype.movePrevious = function () {\r\n        DateUtil.previous(this.interval, this.service.currentDate);\r\n        this.next = this.current;\r\n        this.current = this.previous;\r\n        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));\r\n    };\r\n    CalendarRangeService.prototype.calc = function (forwards) {\r\n        if (forwards) {\r\n            return this.next;\r\n        }\r\n        return this.previous;\r\n    };\r\n    CalendarRangeService.prototype.calcRange = function (startDate) {\r\n        var start = this.calcStart(startDate);\r\n        if (this.service.inFinalView) {\r\n            DateUtil.startOf(this.marginal, start, true);\r\n        }\r\n        var dates = this.calcDates(start);\r\n        var items = this.calcItems(dates, startDate);\r\n        return new CalendarRange(start, dates, items, Util.Array.group(items, this.columns), this.dateComparer);\r\n    };\r\n    CalendarRangeService.prototype.calcStart = function (date) {\r\n        return DateUtil.startOf(this.interval, DateUtil.clone(date));\r\n    };\r\n    CalendarRangeService.prototype.calcDates = function (rangeStart) {\r\n        var _this = this;\r\n        return Util.Array\r\n            .range(this.length)\r\n            .map(function (i) { return DateUtil.add(_this.marginal, DateUtil.clone(rangeStart), i); });\r\n    };\r\n    CalendarRangeService.prototype.calcItems = function (dateRange, baseDate) {\r\n        var _this = this;\r\n        return dateRange.map(function (date) {\r\n            var item = new CalendarItem(date);\r\n            item.isDisabled = !_this.dateComparer.between(item.date, _this.service.minDate, _this.service.maxDate);\r\n            item.isActive = _this.dateComparer.equal(item.date, _this.service.selectedDate);\r\n            item.isToday = _this.dateComparer.equal(item.date, new Date());\r\n            item.isSelectable = item.isDisabled;\r\n            _this.configureItem(item, baseDate);\r\n            return item;\r\n        });\r\n    };\r\n    return CalendarRangeService;\r\n}());\r\nexport { CalendarRangeService };\r\n//# sourceMappingURL=calendar-range.service.js.map \r\n",null]}