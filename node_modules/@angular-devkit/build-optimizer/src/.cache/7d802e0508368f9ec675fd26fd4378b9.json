{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\modal\\classes\\modal-controls.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\modal\\classes\\modal-controls.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\n// Used to pass ability to control a modal to a component.\r\nvar \r\n// Used to pass ability to control a modal to a component.\r\nModalControls = (function () {\r\n    function ModalControls(approve, deny) {\r\n        this.approve = approve;\r\n        this.deny = deny;\r\n    }\r\n    // Use method here rather than arrow variables to make intellisense show they're methods.\r\n    // Use method here rather than arrow variables to make intellisense show they're methods.\r\n    ModalControls.prototype.approve =\r\n        // Use method here rather than arrow variables to make intellisense show they're methods.\r\n        function (result) { };\r\n    ModalControls.prototype.deny = function (result) { };\r\n    return ModalControls;\r\n}());\r\n// Used to pass ability to control a modal to a component.\r\nexport { ModalControls };\r\n// Injected into custom modal components, to allow control of the modal, and access to a context object.\r\nvar \r\n// Injected into custom modal components, to allow control of the modal, and access to a context object.\r\nModal = (function (_super) {\r\n    __extends(Modal, _super);\r\n    function Modal(controls, context) {\r\n        var _this = \r\n        // Instances of `ModalControls` are only created in the `SuiModal` constructor,\r\n        // so we take an initialised instance rather than remaking one each time.\r\n        _super.call(this, controls.approve, controls.deny) || this;\r\n        _this.context = context;\r\n        return _this;\r\n    }\r\n    return Modal;\r\n}(ModalControls));\r\n// Injected into custom modal components, to allow control of the modal, and access to a context object.\r\nexport { Modal };\r\n//# sourceMappingURL=modal-controls.js.map \r\n",null]}