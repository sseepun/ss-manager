{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\misc\\util\\services\\component-factory.service.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\misc\\util\\services\\component-factory.service.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ReflectiveInjector } from \"@angular/core\";\nvar SuiComponentFactory = /*@__PURE__*/ (function () {\n    function SuiComponentFactory(_applicationRef, _componentFactoryResolver, _injector) {\n        this._applicationRef = _applicationRef;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._injector = _injector;\n    }\n    SuiComponentFactory.prototype.createComponent = function (type, providers) {\n        if (providers === void 0) {\n            providers = [];\n        }\n        // Resolve a factory for creating components of type `type`.\n        var factory = this._componentFactoryResolver.resolveComponentFactory(type);\n        // Resolve and create an injector with the specified providers.\n        var injector = ReflectiveInjector.resolveAndCreate(providers, this._injector);\n        // Create a component using the previously resolved factory & injector.\n        var componentRef = factory.create(injector);\n        return componentRef;\n    };\n    SuiComponentFactory.prototype.createView = function (viewContainer, template, context) {\n        viewContainer.createEmbeddedView(template, context);\n    };\n    // Inserts the component into the specified view container.\n    // Inserts the component into the specified view container.\n    SuiComponentFactory.prototype.attachToView =\n        // Inserts the component into the specified view container.\n        function (componentRef, viewContainer) {\n            viewContainer.insert(componentRef.hostView, 0);\n        };\n    // Inserts the component in the root application node.\n    // Inserts the component in the root application node.\n    SuiComponentFactory.prototype.attachToApplication =\n        // Inserts the component in the root application node.\n        function (componentRef) {\n            this._applicationRef.attachView(componentRef.hostView);\n        };\n    // Detaches the component from the root application node.\n    // Detaches the component from the root application node.\n    SuiComponentFactory.prototype.detachFromApplication =\n        // Detaches the component from the root application node.\n        function (componentRef) {\n            this._applicationRef.detachView(componentRef.hostView);\n        };\n    // Moves the component to the specified DOM element.\n    // Moves the component to the specified DOM element.\n    SuiComponentFactory.prototype.moveToElement =\n        // Moves the component to the specified DOM element.\n        function (componentRef, element) {\n            element.appendChild(componentRef.location.nativeElement);\n        };\n    // Moves the component to the document body.\n    // Moves the component to the document body.\n    SuiComponentFactory.prototype.moveToDocumentBody =\n        // Moves the component to the document body.\n        function (componentRef) {\n            this.moveToElement(componentRef, (document.querySelector(\"body\")));\n        };\n    SuiComponentFactory.prototype.detachFromDocument = function (componentRef) {\n        var element = componentRef.location.nativeElement;\n        // We can't use `element.remove()` due to lack of IE11 support.\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    };\n    return SuiComponentFactory;\n}());\nexport { SuiComponentFactory };\n//# sourceMappingURL=component-factory.service.js.map \n",null]}