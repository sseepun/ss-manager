{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\misc\\util\\helpers\\util.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\misc\\util\\helpers\\util.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// Keyboard keycodes.\r\n// Keyboard keycodes.\r\nexport var KeyCode;\r\n// Keyboard keycodes.\r\n(function (KeyCode) {\r\n    KeyCode[KeyCode[\"Left\"] = 37] = \"Left\";\r\n    KeyCode[KeyCode[\"Up\"] = 38] = \"Up\";\r\n    KeyCode[KeyCode[\"Right\"] = 39] = \"Right\";\r\n    KeyCode[KeyCode[\"Down\"] = 40] = \"Down\";\r\n    KeyCode[KeyCode[\"Escape\"] = 27] = \"Escape\";\r\n    KeyCode[KeyCode[\"Enter\"] = 13] = \"Enter\";\r\n    KeyCode[KeyCode[\"Space\"] = 32] = \"Space\";\r\n    KeyCode[KeyCode[\"Backspace\"] = 8] = \"Backspace\";\r\n})(KeyCode || (KeyCode = {}));\r\nvar HandledEvent = /*@__PURE__*/ (function () {\r\n    function HandledEvent() {\r\n    }\r\n    return HandledEvent;\r\n}());\r\nexport { HandledEvent };\r\nexport var Util = {\r\n    Array: {\r\n        range: function (n, offset) {\r\n            if (offset === void 0) {\r\n                offset = 0;\r\n            }\r\n            return Array(n).fill(0).map(function (z, i) { return i + offset; });\r\n        },\r\n        group: function (items, groupLength) {\r\n            var mutable = items.slice(0);\r\n            var groups = [];\r\n            while (mutable.length > 0) {\r\n                groups.push(mutable.splice(0, groupLength));\r\n            }\r\n            return groups;\r\n        },\r\n        groupBy: function (items, field) {\r\n            return items.reduce(function (groups, i) {\r\n                var fieldValue = i[field].toString();\r\n                groups[fieldValue] = groups[fieldValue] || [];\r\n                groups[fieldValue].push(i);\r\n                return groups;\r\n            }, Object());\r\n        },\r\n        flatten: function (items) {\r\n            return items.reduce(function (is, i) { return is.concat(i); }, []);\r\n        }\r\n    },\r\n    String: {\r\n        padLeft: function (str, length, padding) {\r\n            var s = str;\r\n            while (s.length < length) {\r\n                s = padding + s;\r\n            }\r\n            return s;\r\n        }\r\n    },\r\n    DOM: {\r\n        parseBooleanAttribute: function (attributeValue) {\r\n            var value = attributeValue;\r\n            if (typeof attributeValue === \"string\") {\r\n                value = true;\r\n            }\r\n            return value;\r\n        }\r\n    },\r\n    Object: {\r\n        readValue: function (object, path) {\r\n            if (!path) {\r\n                return object;\r\n            }\r\n            var recursed;\r\n            for (var i = 0, p = path.split(\".\"), len = p.length; i < len; i++) {\r\n                recursed = object[p[i]];\r\n            }\r\n            return recursed;\r\n        }\r\n    },\r\n    Math: {\r\n        round: function (r, n) {\r\n            return Math.round(r / n) * n;\r\n        },\r\n        roundUp: function (r, n) {\r\n            return Math.ceil(r / n) * n;\r\n        },\r\n        roundDown: function (r, n) {\r\n            return Math.floor(r / n) * n;\r\n        },\r\n        mod: function (r, n) {\r\n            var rem = r % n;\r\n            if (rem < 0) {\r\n                return rem + n;\r\n            }\r\n            return rem;\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=util.js.map \r\n",null]}