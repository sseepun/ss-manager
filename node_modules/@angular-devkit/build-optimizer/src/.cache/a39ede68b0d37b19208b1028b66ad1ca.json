{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\select\\classes\\select-base.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\select\\classes\\select-base.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ViewChild, HostBinding, HostListener, Input, ContentChildren, ContentChild, EventEmitter, Output } from \"@angular/core\";\nimport { DropdownService, SuiDropdownMenu } from \"../../dropdown/index\";\nimport { SearchService } from \"../../search/index\";\nimport { Util, KeyCode } from \"../../../misc/util/index\";\nimport { SuiSelectOption } from \"../components/select-option\";\nimport { SuiSelectSearch } from \"../directives/select-search\";\n// We use generic type T to specify the type of the options we are working with,\n// and U to specify the type of the property of the option used as the value.\nvar SuiSelectBase = /*@__PURE__*/ (function () {\n    function SuiSelectBase(_element, renderer, _localizationService) {\n        var _this = this;\n        this._element = _element;\n        this._localizationService = _localizationService;\n        this.dropdownService = new DropdownService();\n        // We do want an empty query to return all results.\n        this.searchService = new SearchService(true);\n        this.isSearchable = false;\n        this.onLocaleUpdate();\n        this._localizationService.onLanguageUpdate.subscribe(function () { return _this.onLocaleUpdate(); });\n        this._renderedSubscriptions = [];\n        this.icon = \"dropdown\";\n        this.transition = \"slide down\";\n        this.transitionDuration = 200;\n        this.onTouched = new EventEmitter();\n        this._documentKeyDownListener = renderer.listen(\"document\", \"keydown\", function (e) { return _this.onDocumentKeyDown(e); });\n        this._selectClasses = true;\n    }\n    Object.defineProperty(SuiSelectBase.prototype, \"isActive\", {\n        get: function () {\n            return this.dropdownService.isOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"isVisible\", {\n        get: function () {\n            return this._menu.isVisible;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"_searchClass\", {\n        get: function () {\n            return this.isSearchable && !this.isSearchExternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"isSearching\", {\n        get: function () {\n            return this.searchService.isSearching;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"searchInput\", {\n        get: function () {\n            return this._manualSearch || this._internalSearch;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"tabIndex\", {\n        get: function () {\n            if (this.isDisabled) {\n                // If disabled, remove from tabindex.\n                return -1;\n            }\n            if (this.dropdownService.isOpen && this.isSearchExternal) {\n                // If open & in menu search, remove from tabindex (as input always autofocusses).\n                return -1;\n            }\n            if (this._tabIndex != undefined) {\n                // If custom tabindex, default to that.\n                return this._tabIndex;\n            }\n            if (this._searchClass) {\n                // If search input enabled, tab goes to input.\n                return -1;\n            }\n            // Otherwise, return default of 0.\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"isDisabled\", {\n        get: function () {\n            return this.dropdownService.isDisabled;\n        },\n        set: function (value) {\n            this.dropdownService.isDisabled = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"options\", {\n        set: function (options) {\n            if (options) {\n                this.searchService.options = options;\n                this.optionsUpdateHook();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"optionsFilter\", {\n        set: function (filter) {\n            if (filter) {\n                this.searchService.optionsFilter = filter;\n                this.optionsUpdateHook();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"optionsLookup\", {\n        set: function (lookup) {\n            if (lookup) {\n                this.searchService.optionsLookup = lookup;\n                this.optionsUpdateHook();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"filteredOptions\", {\n        get: function () {\n            return this.searchService.results;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"availableOptions\", {\n        // Deprecated\n        get: \n        // Deprecated\n        function () {\n            return this.filteredOptions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"query\", {\n        get: function () {\n            return this.isSearchable ? this.searchService.query : undefined;\n        },\n        set: function (query) {\n            var _this = this;\n            if (query != undefined) {\n                this.queryUpdateHook();\n                this.updateQuery(query);\n                // Update the rendered text as query has changed.\n                this._renderedOptions.forEach(function (ro) { return _this.initialiseRenderedOption(ro); });\n                if (this.searchInput) {\n                    this.searchInput.query = query;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"labelField\", {\n        get: function () {\n            return this.searchService.optionsField;\n        },\n        set: function (field) {\n            this.searchService.optionsField = field;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"labelGetter\", {\n        get: function () {\n            var _this = this;\n            // Helper function to retrieve the label from an item.\n            return function (obj) {\n                var label = Util.Object.readValue(obj, _this.labelField);\n                if (label != undefined) {\n                    return label.toString();\n                }\n                return \"\";\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"valueGetter\", {\n        get: function () {\n            var _this = this;\n            // Helper function to retrieve the value from an item.\n            return function (obj) { return Util.Object.readValue(obj, _this.valueField); };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"configuredFormatter\", {\n        get: function () {\n            var _this = this;\n            if (this._optionFormatter) {\n                return function (o) { return _this._optionFormatter(o, _this.isSearchable ? _this.query : undefined); };\n            }\n            else if (this.searchService.optionsLookup) {\n                return function (o) { return _this.labelGetter(o); };\n            }\n            else {\n                return function (o) { return _this.searchService.highlightMatches(_this.labelGetter(o), _this.query || \"\"); };\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"optionFormatter\", {\n        set: function (formatter) {\n            this._optionFormatter = formatter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiSelectBase.prototype, \"localeValues\", {\n        get: function () {\n            return this._localizationService.override(this._localeValues, this.localeOverrides);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiSelectBase.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._menu.service = this.dropdownService;\n        // We manually specify the menu items to the menu because the @ContentChildren doesn't pick up our dynamically rendered items.\n        this._menu.items = this._renderedOptions;\n        if (this._manualSearch) {\n            this.isSearchable = true;\n            this.isSearchExternal = true;\n        }\n        if (this.searchInput) {\n            this.searchInput.onQueryUpdated.subscribe(function (q) { return _this.query = q; });\n            this.searchInput.onQueryKeyDown.subscribe(function (e) { return _this.onQueryInputKeydown(e); });\n        }\n        // We must call this immediately as changes doesn't fire when you subscribe.\n        this.onAvailableOptionsRendered();\n        this._renderedOptions.changes.subscribe(function () { return _this.onAvailableOptionsRendered(); });\n    };\n    SuiSelectBase.prototype.onLocaleUpdate = function () {\n        this._localeValues = this._localizationService.get().select;\n    };\n    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.\n    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.\n    SuiSelectBase.prototype.optionsUpdateHook =\n        // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.\n        function () { };\n    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.\n    // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.\n    SuiSelectBase.prototype.queryUpdateHook =\n        // Hook is here since Typescript doesn't yet support overriding getters & setters while still calling the superclass.\n        function () { };\n    SuiSelectBase.prototype.updateQuery = function (query) {\n        var _this = this;\n        // Update the query then open the dropdown, as after keyboard input it should always be open.\n        this.searchService.updateQuery(query, function () {\n            return _this.dropdownService.setOpenState(true);\n        });\n    };\n    SuiSelectBase.prototype.resetQuery = function (delayed) {\n        if (delayed === void 0) {\n            delayed = true;\n        }\n        // The search delay is set to the transition duration to ensure results\n        // aren't rendered as the select closes as that causes a sudden flash.\n        if (delayed) {\n            this.searchService.searchDelay = this._menu.menuTransitionDuration;\n            this.searchService.updateQueryDelayed(\"\");\n        }\n        else {\n            this.searchService.updateQuery(\"\");\n        }\n        if (this.searchInput) {\n            this.searchInput.query = \"\";\n        }\n    };\n    SuiSelectBase.prototype.onAvailableOptionsRendered = function () {\n        var _this = this;\n        // Unsubscribe from all previous subscriptions to avoid memory leaks on large selects.\n        this._renderedSubscriptions.forEach(function (rs) { return rs.unsubscribe(); });\n        this._renderedSubscriptions = [];\n        this._renderedOptions.forEach(function (ro) {\n            // Slightly delay initialisation to avoid change after checked errors. TODO - look into avoiding this!\n            setTimeout(function () { return _this.initialiseRenderedOption(ro); });\n            _this._renderedSubscriptions.push(ro.onSelected.subscribe(function () { return _this.selectOption(ro.value); }));\n        });\n        // If no options have been provided, autogenerate them from the rendered ones.\n        if (this.searchService.options.length === 0 && !this.searchService.optionsLookup) {\n            this.options = this._renderedOptions.map(function (ro) { return ro.value; });\n        }\n    };\n    SuiSelectBase.prototype.initialiseRenderedOption = function (option) {\n        option.usesTemplate = !!this.optionTemplate;\n        option.formatter = this.configuredFormatter;\n        if (option.usesTemplate) {\n            this.drawTemplate(option.templateSibling, option.value);\n        }\n        option.changeDetector.markForCheck();\n    };\n    SuiSelectBase.prototype.findOption = function (options, value) {\n        var _this = this;\n        // Tries to find an option in options array\n        return options.find(function (o) { return value === _this.valueGetter(o); });\n    };\n    SuiSelectBase.prototype.onCaretClick = function (e) {\n        if (!e.eventHandled) {\n            e.eventHandled = true;\n            if (!this.dropdownService.isAnimating) {\n                this.dropdownService.setOpenState(!this.dropdownService.isOpen);\n                this.focus();\n            }\n        }\n    };\n    SuiSelectBase.prototype.onClick = function (e) {\n        if (!e.eventHandled && !this.dropdownService.isAnimating) {\n            e.eventHandled = true;\n            // If the dropdown is searchable, clicking should keep it open, otherwise we toggle the open state.\n            this.dropdownService.setOpenState(this.isSearchable ? true : !this.dropdownService.isOpen);\n            // Immediately focus the search input whenever clicking on the select.\n            this.focus();\n        }\n    };\n    SuiSelectBase.prototype.onFocusIn = function () {\n        if (!this.dropdownService.isOpen && !this.dropdownService.isAnimating) {\n            this.dropdownService.setOpenState(true);\n            this.focus();\n        }\n    };\n    SuiSelectBase.prototype.onFocusOut = function (e) {\n        if (!this._element.nativeElement.contains(e.relatedTarget)) {\n            this.dropdownService.setOpenState(false);\n            this.onTouched.emit();\n        }\n    };\n    SuiSelectBase.prototype.onKeyPress = function (e) {\n        if (e.keyCode === KeyCode.Enter) {\n            // Enables support for focussing and opening with the keyboard alone.\n            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.\n            this._element.nativeElement.click();\n        }\n    };\n    SuiSelectBase.prototype.onDocumentKeyDown = function (e) {\n        if (this._element.nativeElement.contains(e.target) &&\n            !this.dropdownService.isOpen &&\n            e.keyCode === KeyCode.Down) {\n            // Enables support for focussing and opening with the keyboard alone.\n            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.\n            this._element.nativeElement.click();\n            e.preventDefault();\n        }\n    };\n    SuiSelectBase.prototype.onQueryInputKeydown = function (event) { };\n    SuiSelectBase.prototype.focus = function () {\n        if (this.isSearchable && this.searchInput) {\n            // Focusses the search input only when searchable.\n            // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.\n            this.searchInput.focus();\n        }\n        else {\n            this._element.nativeElement.focus();\n        }\n    };\n    // Helper that draws the provided template beside the provided ViewContainerRef.\n    // Helper that draws the provided template beside the provided ViewContainerRef.\n    SuiSelectBase.prototype.drawTemplate =\n        // Helper that draws the provided template beside the provided ViewContainerRef.\n        function (siblingRef, value) {\n            siblingRef.clear();\n            // Use of `$implicit` means use of <ng-template let-option> syntax is supported.\n            siblingRef.createEmbeddedView(this.optionTemplate, {\n                $implicit: value,\n                query: this.query\n            });\n        };\n    SuiSelectBase.prototype.ngOnDestroy = function () {\n        this._renderedSubscriptions.forEach(function (s) { return s.unsubscribe(); });\n        this._documentKeyDownListener();\n    };\n    return SuiSelectBase;\n}());\nexport { SuiSelectBase };\n//# sourceMappingURL=select-base.js.map \n",null]}