{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\checkbox\\directives\\radio-manager.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\checkbox\\directives\\radio-manager.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ContentChildren, ElementRef } from \"@angular/core\";\nimport { SuiRadio } from \"../components/radio\";\nimport { Util } from \"../../../misc/util/index\";\nvar SuiRadioManager = /*@__PURE__*/ (function () {\n    function SuiRadioManager(element) {\n        this.element = element;\n        this.isNested = false;\n        this._radioSubs = [];\n    }\n    SuiRadioManager.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.updateNesting();\n        this._subManagers.changes.subscribe(function () { return _this.updateNesting(); });\n        this.updateRadios();\n        this._renderedRadios.changes.subscribe(function () { return _this.updateRadios(); });\n    };\n    SuiRadioManager.prototype.updateNesting = function () {\n        var _this = this;\n        this._subManagers\n            .filter(function (m) { return m !== _this; })\n            .forEach(function (m) { return m.isNested = true; });\n    };\n    SuiRadioManager.prototype.updateRadios = function () {\n        var _this = this;\n        this._radioSubs.forEach(function (s) { return s.unsubscribe(); });\n        this._radioSubs = [];\n        var groups = Util.Array.groupBy(this._renderedRadios.toArray(), \"name\");\n        Object\n            .keys(groups)\n            .map(function (k) { return groups[k]; })\n            .forEach(function (g) {\n            return g\n                .forEach(function (r) {\n                return _this._radioSubs\n                    .push(r.onCurrentValueChange\n                    .subscribe(function (v) {\n                    if (!_this.isNested) {\n                        g.forEach(function (radio) { return radio.writeValue(v); });\n                    }\n                }));\n            });\n        });\n    };\n    return SuiRadioManager;\n}());\nexport { SuiRadioManager };\n//# sourceMappingURL=radio-manager.js.map \n",null]}