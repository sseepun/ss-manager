{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\accordion\\components\\accordion-panel.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\accordion\\components\\accordion-panel.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport { TransitionController, Transition } from \"../../transition/index\";\nvar SuiAccordionPanel = /*@__PURE__*/ (function () {\n    function SuiAccordionPanel(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        this.transitionController = new TransitionController(false);\n        this._isOpen = false;\n        this.isOpenChange = new EventEmitter(false);\n    }\n    Object.defineProperty(SuiAccordionPanel.prototype, \"service\", {\n        set: function (service) {\n            this._service = service;\n            this._changeDetector.detectChanges();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiAccordionPanel.prototype, \"isOpen\", {\n        get: function () {\n            return this._isOpen;\n        },\n        set: function (value) {\n            // Convert to boolean (fixes false != undefined)\n            var isOpen = !!value;\n            if (isOpen !== this.isOpen) {\n                // Only update if the value has changed.\n                this._isOpen = isOpen;\n                if (isOpen && this._service) {\n                    // If we are opening this panel, we must close the other ones.\n                    this._service.closeOtherPanels(this);\n                }\n                this.isOpenChange.emit(this.isOpen);\n                // Cancel all current animations, and fade the contents. The direction is automatic.\n                this.transitionController.stopAll();\n                this.transitionController.animate(new Transition(this.transition, this.transitionDuration));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiAccordionPanel.prototype, \"transition\", {\n        get: function () {\n            if (this._service) {\n                return this._service.transition;\n            }\n            return \"fade\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiAccordionPanel.prototype, \"transitionDuration\", {\n        get: function () {\n            if (this._service) {\n                // Return the service defined transition duration.\n                return this._service.transitionDuration;\n            }\n            // Revert to instantaneous if the service is not yet loaded.\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiAccordionPanel.prototype.toggle = function () {\n        if (!this.isDisabled) {\n            this.isOpen = !this.isOpen;\n        }\n    };\n    return SuiAccordionPanel;\n}());\nexport { SuiAccordionPanel };\n//# sourceMappingURL=accordion-panel.js.map \n",null]}