{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\select\\components\\select.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\select\\components\\select.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Component, ViewContainerRef, ViewChild, Output, EventEmitter, ElementRef, Directive, Input, Renderer2 } from \"@angular/core\";\nimport { customValueAccessorFactory, CustomValueAccessor } from \"../../../misc/util/index\";\nimport { SuiLocalizationService } from \"../../../behaviors/localization/index\";\nimport { SuiSelectBase } from \"../classes/select-base\";\nvar SuiSelect = /*@__PURE__*/ (function (_super) {\n    __extends(SuiSelect, _super);\n    function SuiSelect(element, renderer, localizationService) {\n        var _this = _super.call(this, element, renderer, localizationService) || this;\n        _this.selectedOptionChange = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(SuiSelect.prototype, \"placeholder\", {\n        get: function () {\n            return this._placeholder || this.localeValues.single.placeholder;\n        },\n        set: function (placeholder) {\n            this._placeholder = placeholder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiSelect.prototype.optionsUpdateHook = function () {\n        if (!this._writtenOption && this.selectedOption) {\n            // We need to check the option still exists.\n            this.writeValue(this.valueGetter(this.selectedOption));\n        }\n        if (this._writtenOption && this.searchService.options.length > 0) {\n            // If there was an value written by ngModel before the options had been loaded, this runs to fix it.\n            this.selectedOption = this.findOption(this.searchService.options, this._writtenOption);\n            if (this.selectedOption) {\n                this._writtenOption = undefined;\n                this.drawSelectedOption();\n            }\n        }\n    };\n    SuiSelect.prototype.queryUpdateHook = function () {\n        // When the query is updated, we just abandon the current selection.\n        this.selectedOption = undefined;\n    };\n    SuiSelect.prototype.selectOption = function (option) {\n        // Choose and emit the selected option.\n        this.selectedOption = option;\n        this.selectedOptionChange.emit(this.valueGetter(option));\n        this.dropdownService.setOpenState(false);\n        this.resetQuery();\n        this.drawSelectedOption();\n        // Automatically refocus the search input for better keyboard accessibility.\n        this.focus();\n    };\n    SuiSelect.prototype.writeValue = function (value) {\n        var _this = this;\n        if (value != undefined) {\n            if (this.searchService.options.length > 0) {\n                // If the options have already been loaded, we can immediately match the ngModel value to an option.\n                this.selectedOption = this.findOption(this.searchService.options, value);\n                this.drawSelectedOption();\n            }\n            if (this.selectedOption == undefined) {\n                if (this.valueField && this.searchService.hasItemLookup) {\n                    // If the search service has a selected lookup function, make use of that to load the initial value.\n                    this.searchService\n                        .initialLookup(value)\n                        .then(function (i) {\n                        _this.selectedOption = i;\n                        _this.drawSelectedOption();\n                    });\n                }\n                else {\n                    // Otherwise, cache the written value for when options are set.\n                    this._writtenOption = value;\n                }\n            }\n        }\n        else {\n            this.selectedOption = undefined;\n            this.drawSelectedOption();\n        }\n    };\n    SuiSelect.prototype.initialiseRenderedOption = function (option) {\n        _super.prototype.initialiseRenderedOption.call(this, option);\n        // Boldens the item so it appears selected in the dropdown.\n        option.isActive = option.value === this.selectedOption;\n    };\n    SuiSelect.prototype.drawSelectedOption = function () {\n        // Updates the active class on the newly selected option.\n        if (this._renderedOptions) {\n            this.onAvailableOptionsRendered();\n        }\n        if (this.selectedOption != undefined && this.optionTemplate) {\n            this.drawTemplate(this._optionTemplateSibling, this.selectedOption);\n        }\n    };\n    return SuiSelect;\n}(SuiSelectBase));\nexport { SuiSelect };\n// Value accessor directive for the select to support ngModel.\nvar SuiSelectValueAccessor = /*@__PURE__*/ (function (_super) {\n    __extends(SuiSelectValueAccessor, _super);\n    function SuiSelectValueAccessor(host) {\n        return _super.call(this, host) || this;\n    }\n    return SuiSelectValueAccessor;\n}(CustomValueAccessor));\nexport { SuiSelectValueAccessor };\n//# sourceMappingURL=select.js.map \n",null]}