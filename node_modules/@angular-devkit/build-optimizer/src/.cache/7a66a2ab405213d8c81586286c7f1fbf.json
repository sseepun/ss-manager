{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\dropdown\\directives\\dropdown.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\dropdown\\directives\\dropdown.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, Input, HostBinding, Output, ContentChild, ElementRef, HostListener, ContentChildren } from \"@angular/core\";\nimport { KeyCode } from \"../../../misc/util/index\";\nimport { DropdownService, DropdownAutoCloseType } from \"../services/dropdown.service\";\nimport { SuiDropdownMenu } from \"./dropdown-menu\";\nvar SuiDropdown = /*@__PURE__*/ (function () {\n    function SuiDropdown(_element) {\n        var _this = this;\n        this._element = _element;\n        this.service = new DropdownService();\n        this.service.isOpenChange.subscribe(function () {\n            if (_this.service.isOpen) {\n                _this._element.nativeElement.focus();\n            }\n        });\n    }\n    Object.defineProperty(SuiDropdown.prototype, \"children\", {\n        get: function () {\n            var _this = this;\n            // @ContentChildren includes the current element by default.\n            return this._children.filter(function (c) { return c !== _this; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdown.prototype, \"isOpenChange\", {\n        get: function () {\n            return this.service.isOpenChange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdown.prototype, \"isActive\", {\n        get: function () {\n            // This is to ensure nested dropdowns don't get made bold.\n            return this.service.isOpen && !this.service.isNested;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdown.prototype, \"isOpen\", {\n        get: function () {\n            return this.service.isOpen;\n        },\n        set: function (value) {\n            // If we are opening the dropdown, we want to always open its parents.\n            this.service.setOpenState(value, !!value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdown.prototype, \"isDisabled\", {\n        get: function () {\n            return this.service.isDisabled;\n        },\n        set: function (value) {\n            this.service.setDisabledState(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdown.prototype, \"tabIndex\", {\n        get: function () {\n            if (this.isDisabled || this.service.isNested) {\n                // If disabled, remove from tabindex.\n                return undefined;\n            }\n            if (this._tabIndex != undefined) {\n                // If custom tabindex, default to that.\n                return this._tabIndex;\n            }\n            // Otherwise, return default of 0.\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDropdown.prototype, \"autoClose\", {\n        get: function () {\n            return this.service.autoCloseMode;\n        },\n        set: function (value) {\n            this.service.autoCloseMode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiDropdown.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (!this._menu) {\n            throw new Error(\"You must set [suiDropdownMenu] on the menu element.\");\n        }\n        this._menu.service = this.service;\n        this.childrenUpdated();\n        this._children.changes\n            .subscribe(function () { return _this.childrenUpdated(); });\n    };\n    SuiDropdown.prototype.childrenUpdated = function () {\n        var _this = this;\n        // Reregister child dropdowns each time the menu content changes.\n        this.children\n            .map(function (c) { return c.service; })\n            .forEach(function (s) { return _this.service.registerChild(s); });\n    };\n    SuiDropdown.prototype.onClick = function (e) {\n        if (!e.eventHandled) {\n            e.eventHandled = true;\n            this.service.toggleOpenState();\n        }\n    };\n    SuiDropdown.prototype.onFocusOut = function (e) {\n        if (!this._element.nativeElement.contains(e.relatedTarget)) {\n            this.externallyClose();\n        }\n    };\n    SuiDropdown.prototype.onKeypress = function (e) {\n        // Block the keyboard event from being fired on parent dropdowns.\n        if (!e.eventHandled) {\n            if (e.keyCode === KeyCode.Enter) {\n                e.eventHandled = true;\n                this.service.setOpenState(true);\n            }\n        }\n    };\n    SuiDropdown.prototype.externallyClose = function () {\n        if (this.service.autoCloseMode === DropdownAutoCloseType.ItemClick ||\n            this.service.autoCloseMode === DropdownAutoCloseType.OutsideClick) {\n            // No need to reflect in parent since they are also bound to document.\n            this.service.setOpenState(false);\n        }\n    };\n    return SuiDropdown;\n}());\nexport { SuiDropdown };\n//# sourceMappingURL=dropdown.js.map \n",null]}