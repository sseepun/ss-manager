{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\behaviors\\localization\\services\\localization.service.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\behaviors\\localization\\services\\localization.service.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, EventEmitter } from \"@angular/core\";\nimport enGB from \"../locales/en-GB\";\nimport * as $extend from \"extend\";\nfunction deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nfunction deepExtend(target, source) {\n    // Rollup...\n    var extend = $extend.default || $extend;\n    return extend(true, target, source);\n}\nfunction lang(language) {\n    return language.toLowerCase().replace(\"-\", \"\");\n}\nvar SuiLocalizationService = /*@__PURE__*/ (function () {\n    function SuiLocalizationService() {\n        this.onLanguageUpdate = new EventEmitter();\n        this._fallbackValues = enGB;\n        this._values = {};\n        this._language = \"en-GB\";\n        this.load(\"en-GB\", enGB);\n    }\n    Object.defineProperty(SuiLocalizationService.prototype, \"language\", {\n        get: function () {\n            return this._language;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiLocalizationService.prototype.setLanguage = function (language) {\n        if (lang(this._language) !== lang(language)) {\n            this._language = language;\n            this.onLanguageUpdate.emit();\n        }\n    };\n    SuiLocalizationService.prototype.get = function (language) {\n        if (language === void 0) {\n            language = this.language;\n        }\n        var values = deepClone(this._fallbackValues);\n        if (!this._values[lang(language)]) {\n            throw new Error(\"Locale \" + language + \" is not loaded\");\n        }\n        deepExtend(values, this._values[lang(language)]);\n        return deepClone(values);\n    };\n    SuiLocalizationService.prototype.override = function (values, overrides) {\n        return deepExtend(deepClone(values), overrides);\n    };\n    SuiLocalizationService.prototype.load = function (language, values) {\n        this._values[lang(language)] = deepClone(values);\n        this.onLanguageUpdate.emit();\n    };\n    SuiLocalizationService.prototype.patch = function (language, values) {\n        deepExtend(this._values[lang(language)], values);\n    };\n    SuiLocalizationService.prototype.interpolate = function (value, variables) {\n        return variables.reduce(function (s, _a) {\n            var k = _a[0], v = _a[1];\n            return s.replace(new RegExp(\"#{\" + k + \"}\", \"g\"), v);\n        }, value);\n    };\n    return SuiLocalizationService;\n}());\nexport { SuiLocalizationService };\n//# sourceMappingURL=localization.service.js.map \n",null]}