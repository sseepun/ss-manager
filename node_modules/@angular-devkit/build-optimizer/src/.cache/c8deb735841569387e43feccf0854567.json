{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\collapse\\directives\\collapse.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\collapse\\directives\\collapse.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, Input, HostBinding, Renderer2 } from \"@angular/core\";\nvar SuiCollapse = /*@__PURE__*/ (function () {\n    function SuiCollapse(_element, _renderer) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._pristine = true;\n        // Collapse animation duration is 350ms by default.\n        this.collapseDuration = 350;\n        this._isExpanded = false;\n        this._isCollapsing = false;\n    }\n    Object.defineProperty(SuiCollapse.prototype, \"_isCollapsed\", {\n        get: \n        // Set when the collapse is closed, and not animating.\n        function () {\n            return !this._isExpanded && !this._isCollapsing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiCollapse.prototype, \"suiCollapse\", {\n        get: function () {\n            return this._isExpanded;\n        },\n        // Sets the state of the collapse, `true` is collapsed.\n        set: \n        // Sets the state of the collapse, `true` is collapsed.\n        function (value) {\n            if (value) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiCollapse.prototype, \"_animationDuration\", {\n        get: function () {\n            return this._pristine ? 0 : this.collapseDuration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiCollapse.prototype.hide = function () {\n        var _this = this;\n        this._isCollapsing = true;\n        this._isExpanded = false;\n        // Forcibly hide the overflow so that content is not visible past the boundaries of its container.\n        this._renderer.setStyle(this._element.nativeElement, \"overflow\", \"hidden\");\n        // Animate the host element from its scroll height to 0.\n        this.animate(this._element.nativeElement.scrollHeight, 0, false, function () {\n            _this._isCollapsing = false;\n        });\n    };\n    SuiCollapse.prototype.show = function () {\n        var _this = this;\n        this._isCollapsing = true;\n        // Animate the host element from its offset height to its scroll height.\n        this.animate(this._element.nativeElement.offsetHeight, this._element.nativeElement.scrollHeight, true, function () {\n            // Remove the overflow override to enable user styling once again.\n            // Remove the overflow override to enable user styling once again.\n            _this._renderer.removeStyle(_this._element.nativeElement, \"overflow\");\n            _this._isCollapsing = false;\n            _this._isExpanded = true;\n        });\n    };\n    SuiCollapse.prototype.animate = function (startHeight, endHeight, removeOnComplete, callback) {\n        if (removeOnComplete === void 0) {\n            removeOnComplete = false;\n        }\n        if (callback === void 0) {\n            callback = function () { };\n        }\n        var heightFrames = [\n            {\n                offset: 0,\n                height: startHeight + \"px\"\n            },\n            {\n                offset: 1,\n                height: endHeight + \"px\"\n            }\n        ];\n        if (removeOnComplete) {\n            heightFrames.push({\n                offset: 1,\n                height: \"auto\"\n            });\n        }\n        // Animate the collapse using the web animations API.\n        // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.\n        this._element.nativeElement.animate(heightFrames, {\n            delay: 0,\n            // Disable animation on 1st collapse / expansion.\n            duration: this._animationDuration,\n            iterations: 1,\n            easing: \"ease\",\n            fill: \"both\"\n        });\n        if (this._pristine) {\n            // Remove pristine flag when first hit.\n            this._pristine = false;\n        }\n        setTimeout(function () { return callback(); }, this.collapseDuration);\n    };\n    return SuiCollapse;\n}());\nexport { SuiCollapse };\n//# sourceMappingURL=collapse.js.map \n",null]}