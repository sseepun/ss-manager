{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\popup\\classes\\popup-controller.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\popup\\classes\\popup-controller.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { HostListener } from \"@angular/core\";\nimport { PopupTrigger } from \"./popup-config\";\nimport { SuiPopup } from \"../components/popup\";\nvar SuiPopupController = /*@__PURE__*/ (function () {\n    function SuiPopupController(renderer, _element, _componentFactory, config) {\n        var _this = this;\n        this._element = _element;\n        this._componentFactory = _componentFactory;\n        // Generate a new SuiPopup component and attach it to the application view.\n        this._componentRef = this._componentFactory.createComponent(SuiPopup);\n        // Configure popup with provided config.\n        this.popup.config = config;\n        // When the popup is closed (onClose fires on animation complete),\n        this.popup.onClose.subscribe(function () { return _this.cleanup(); });\n        this._documentListener = renderer.listen(\"document\", \"click\", function (e) { return _this.onDocumentClick(e); });\n    }\n    Object.defineProperty(SuiPopupController.prototype, \"popup\", {\n        // Returns generated popup instance.\n        get: \n        // Returns generated popup instance.\n        function () {\n            // Use non-null assertion as we only access this when a popup exists.\n            return this._componentRef.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiPopupController.prototype.configure = function (config) {\n        if (config) {\n            Object.assign(this.popup.config, config);\n        }\n    };\n    SuiPopupController.prototype.openDelayed = function () {\n        var _this = this;\n        // Cancel the opening timer.\n        clearTimeout(this._openingTimeout);\n        // Start the popup opening after the specified delay interval.\n        this._openingTimeout = window.setTimeout(function () { return _this.open(); }, this.popup.config.delay);\n    };\n    SuiPopupController.prototype.open = function () {\n        // Attach the generated component to the current application.\n        this._componentFactory.attachToApplication(this._componentRef);\n        // Move the generated element to the body to avoid any positioning issues.\n        this._componentFactory.moveToDocumentBody(this._componentRef);\n        // Attach a reference to the anchor element. We do it here because IE11 loves to complain.\n        this.popup.anchor = this._element;\n        // Start popup open transition.\n        this.popup.open();\n        // Call lifecyle hook\n        var lifecycle = this.popupOnOpen;\n        if (lifecycle) {\n            lifecycle.call(this);\n        }\n    };\n    SuiPopupController.prototype.close = function () {\n        // Cancel the opening timer to stop the popup opening after close has been called.\n        clearTimeout(this._openingTimeout);\n        if (this._componentRef) {\n            // Start popup close transition.\n            this.popup.close();\n        }\n        // Call lifecyle hook\n        var lifecycle = this.popupOnClose;\n        if (lifecycle) {\n            lifecycle.call(this);\n        }\n    };\n    SuiPopupController.prototype.toggleDelayed = function () {\n        // If the popup hasn't been created, or it has but it isn't currently open, open the popup.\n        if (!this._componentRef || (this._componentRef && !this.popup.isOpen)) {\n            return this.openDelayed();\n        }\n        // O'wise, close it.\n        return this.close();\n    };\n    SuiPopupController.prototype.toggle = function () {\n        // If the popup hasn't been created, or it has but it isn't currently open, open the popup.\n        if (!this._componentRef || (this._componentRef && !this.popup.isOpen)) {\n            return this.open();\n        }\n        // O'wise, close it.\n        return this.close();\n    };\n    SuiPopupController.prototype.onMouseEnter = function () {\n        if (this.popup.config.trigger === PopupTrigger.Hover) {\n            this.openDelayed();\n        }\n    };\n    SuiPopupController.prototype.onMouseLeave = function () {\n        if (this.popup.config.trigger === PopupTrigger.Hover) {\n            this.close();\n        }\n    };\n    SuiPopupController.prototype.onClick = function () {\n        if (this.popup.config.trigger === PopupTrigger.Click ||\n            this.popup.config.trigger === PopupTrigger.OutsideClick) {\n            // Repeated clicks require a toggle, rather than just opening the popup each time.\n            this.toggleDelayed();\n        }\n        else if (this.popup.config.trigger === PopupTrigger.Focus &&\n            (!this._componentRef || (this._componentRef && !this.popup.isOpen))) {\n            // Repeated clicks with a focus trigger requires an open (as focus isn't ever lost on repeated click).\n            this.openDelayed();\n        }\n    };\n    SuiPopupController.prototype.onDocumentClick = function (e) {\n        // If the popup trigger is outside click,\n        if (this._componentRef && this.popup.config.trigger === PopupTrigger.OutsideClick) {\n            var target = e.target;\n            // Close the popup if the click is outside of the popup element.\n            if (!this._element.nativeElement.contains(target)) {\n                this.close();\n            }\n        }\n    };\n    SuiPopupController.prototype.onFocusIn = function () {\n        if (this.popup.config.trigger === PopupTrigger.Focus) {\n            this.openDelayed();\n        }\n    };\n    SuiPopupController.prototype.onFocusOut = function (e) {\n        if (!this._element.nativeElement.contains(e.relatedTarget) &&\n            !this.popup.elementRef.nativeElement.contains(e.relatedTarget) &&\n            this.popup.config.trigger === PopupTrigger.Focus) {\n            this.close();\n        }\n    };\n    SuiPopupController.prototype.cleanup = function () {\n        clearTimeout(this._openingTimeout);\n        if (this._componentRef.instance && this._componentRef.instance.positioningService) {\n            this._componentRef.instance.positioningService.destroy();\n        }\n        this._componentFactory.detachFromApplication(this._componentRef);\n    };\n    SuiPopupController.prototype.ngOnDestroy = function () {\n        this.cleanup();\n        this._documentListener();\n    };\n    return SuiPopupController;\n}());\nexport { SuiPopupController };\n//# sourceMappingURL=popup-controller.js.map \n",null]}