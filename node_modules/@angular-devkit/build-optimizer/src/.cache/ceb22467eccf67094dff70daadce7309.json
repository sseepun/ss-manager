{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\modal\\classes\\modal-config.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\modal\\classes\\modal-config.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nexport var ModalSize = {\r\n    Mini: \"mini\",\r\n    Tiny: \"tiny\",\r\n    Small: \"small\",\r\n    Normal: \"normal\",\r\n    Large: \"large\"\r\n};\r\n// Stores a basic set of configuration options for a modal.\r\nvar \r\n// Stores a basic set of configuration options for a modal.\r\nModalConfig = (function () {\r\n    function ModalConfig(context, isClosable) {\r\n        if (context === void 0) {\r\n            context = undefined;\r\n        }\r\n        if (isClosable === void 0) {\r\n            isClosable = true;\r\n        }\r\n        // Initialise with default values.\r\n        this.isClosable = isClosable;\r\n        this.context = context;\r\n        this.size = ModalSize.Normal;\r\n        this.isFullScreen = false;\r\n        this.isBasic = false;\r\n        this.isInverted = false;\r\n        this.mustScroll = false;\r\n        this.transition = \"scale\";\r\n        this.transitionDuration = 500;\r\n    }\r\n    return ModalConfig;\r\n}());\r\n// Stores a basic set of configuration options for a modal.\r\nexport { ModalConfig };\r\n// Used when creating a modal from a `TemplateRef`.\r\nvar \r\n// Used when creating a modal from a `TemplateRef`.\r\nTemplateModalConfig = (function (_super) {\r\n    __extends(TemplateModalConfig, _super);\r\n    function TemplateModalConfig(template, context, isClosable) {\r\n        if (context === void 0) {\r\n            context = undefined;\r\n        }\r\n        if (isClosable === void 0) {\r\n            isClosable = true;\r\n        }\r\n        var _this = _super.call(this, context, isClosable) || this;\r\n        _this.template = template;\r\n        return _this;\r\n    }\r\n    return TemplateModalConfig;\r\n}(ModalConfig));\r\n// Used when creating a modal from a `TemplateRef`.\r\nexport { TemplateModalConfig };\r\n// Used when creating a modal from an existing component.\r\nvar \r\n// Used when creating a modal from an existing component.\r\nComponentModalConfig = (function (_super) {\r\n    __extends(ComponentModalConfig, _super);\r\n    function ComponentModalConfig(component, context, isClosable) {\r\n        if (context === void 0) {\r\n            context = undefined;\r\n        }\r\n        if (isClosable === void 0) {\r\n            isClosable = true;\r\n        }\r\n        var _this = _super.call(this, context, isClosable) || this;\r\n        _this.component = component;\r\n        return _this;\r\n    }\r\n    return ComponentModalConfig;\r\n}(ModalConfig));\r\n// Used when creating a modal from an existing component.\r\nexport { ComponentModalConfig };\r\n//# sourceMappingURL=modal-config.js.map \r\n",null]}