{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\directives\\input.directive.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\directives\\input.directive.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, Host, Input, ElementRef, HostBinding, HostListener } from \"@angular/core\";\nimport { DateUtil } from \"../../../misc/util/index\";\nimport { SuiLocalizationService } from \"../../../behaviors/localization/index\";\nimport { PopupTrigger } from \"../../popup/index\";\nimport { SuiDatepickerDirective, SuiDatepickerDirectiveValueAccessor } from \"./datepicker.directive\";\nimport { InternalDateParser, DateParser } from \"../classes/date-parser\";\nimport * as bowser from \"bowser\";\nimport \"../helpers/is-webview\";\nimport * as isUAWebView from \"is-ua-webview\";\nvar isWebView = isUAWebView[\"default\"] || isUAWebView;\nvar SuiDatepickerInputDirective = /*@__PURE__*/ (function () {\n    function SuiDatepickerInputDirective(datepicker, valueAccessor, element, localizationService) {\n        var _this = this;\n        this.datepicker = datepicker;\n        this.valueAccessor = valueAccessor;\n        this.element = element;\n        this.useNativeOnMobile = true;\n        this.fallbackActive = false;\n        // Whenever the datepicker value updates, update the input text alongside it.\n        this.datepicker.onSelectedDateChange.subscribe(function () {\n            return _this.updateValue(_this.selectedDateString);\n        });\n        localizationService.onLanguageUpdate.subscribe(function () {\n            return _this.updateValue(_this.selectedDateString);\n        });\n    }\n    Object.defineProperty(SuiDatepickerInputDirective.prototype, \"useNativeOnMobile\", {\n        get: function () {\n            return this._useNativeOnMobile;\n        },\n        set: function (fallback) {\n            this._useNativeOnMobile = fallback;\n            var isOnMobile = bowser.mobile || bowser.tablet || isWebView(navigator.userAgent);\n            this.fallbackActive = this.useNativeOnMobile && isOnMobile;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDatepickerInputDirective.prototype, \"fallbackActive\", {\n        get: function () {\n            return this._fallbackActive;\n        },\n        set: function (active) {\n            this._fallbackActive = active;\n            // If the fallback is active, then the trigger must be manual so the datepicker never opens.\n            this.datepicker.popup.config.trigger = this.fallbackActive ? PopupTrigger.Manual : PopupTrigger.Focus;\n            // Update the input value (this will insert the `T` as required).\n            this.updateValue(this.selectedDateString);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDatepickerInputDirective.prototype, \"parser\", {\n        get: function () {\n            if (this.fallbackActive) {\n                return new InternalDateParser(this.datepicker.mode, this.datepicker.localeValues);\n            }\n            return new DateParser(this.datepicker.localeValues.formats[this.datepicker.mode], this.datepicker.localeValues);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDatepickerInputDirective.prototype, \"selectedDateString\", {\n        get: function () {\n            if (this.datepicker.selectedDate) {\n                return this.parser.format(this.datepicker.selectedDate);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDatepickerInputDirective.prototype, \"type\", {\n        get: function () {\n            if (this.fallbackActive) {\n                return this.datepicker.config.fallback;\n            }\n            return \"text\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDatepickerInputDirective.prototype, \"max\", {\n        get: function () {\n            if (this.fallbackActive && this.datepicker.maxDate) {\n                // Since HTML doesn't use a date object max is somewhat tricky.\n                // Our Datepicker will always choose the 1st date on the provided precision,\n                // meaning anything below the maxDate will work, hence endOf.\n                var max = DateUtil.endOf(this.datepicker.config.precision, DateUtil.clone(this.datepicker.maxDate));\n                return this.parser.format(max);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SuiDatepickerInputDirective.prototype, \"min\", {\n        get: function () {\n            if (this.fallbackActive && this.datepicker.minDate) {\n                // Since HTML doesn't use a date object min is somewhat tricky.\n                // We use 1 minute before the next date at the configured precision since\n                // our Datepicker picks the first available date at that precision.\n                var min = DateUtil.clone(this.datepicker.minDate);\n                return this.parser.format(min);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuiDatepickerInputDirective.prototype.updateValue = function (value) {\n        // Only update the current value if it is different to what it's being updated to.\n        // This is so that the editing position isn't changed when manually typing the date.\n        if (!this._lastUpdateTyped) {\n            this.datepicker.renderer.setProperty(this.element.nativeElement, \"value\", value || \"\");\n        }\n        this._lastUpdateTyped = false;\n    };\n    SuiDatepickerInputDirective.prototype.typeValue = function (value) {\n        this._lastUpdateTyped = true;\n        this._currentInputValue = value;\n        if (!value) {\n            // Delete the selected date if no date was entered manually.\n            return this.datepicker.writeValue(undefined);\n        }\n        var parsed = this.parser.parse(value, this.datepicker.selectedDate);\n        if (!isNaN(parsed.getTime()) && value === this.parser.format(parsed)) {\n            return this.datepicker.writeValue(parsed);\n        }\n        return this.datepicker.writeValue(undefined);\n    };\n    SuiDatepickerInputDirective.prototype.onFocusOut = function () {\n        this.valueAccessor.onTouched();\n    };\n    return SuiDatepickerInputDirective;\n}());\nexport { SuiDatepickerInputDirective };\n//# sourceMappingURL=input.directive.js.map \n",null]}