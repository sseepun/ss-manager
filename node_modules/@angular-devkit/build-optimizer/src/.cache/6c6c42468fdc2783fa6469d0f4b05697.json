{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\services\\calendar.service.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\datepicker\\services\\calendar.service.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { EventEmitter } from \"@angular/core\";\r\nimport { DateUtil } from \"../../../misc/util/index\";\r\nexport var CalendarMode = /*@__PURE__*/ (function (CalendarMode) {\r\n    CalendarMode[CalendarMode[\"DateOnly\"] = 0] = \"DateOnly\";\r\n    CalendarMode[CalendarMode[\"TimeOnly\"] = 1] = \"TimeOnly\";\r\n    CalendarMode[CalendarMode[\"Both\"] = 2] = \"Both\";\r\n    return CalendarMode;\r\n})({});\r\nvar CalendarService = /*@__PURE__*/ (function () {\r\n    function CalendarService(config, localeValues) {\r\n        this.localeValues = localeValues;\r\n        this.onManualUpdate = function () { };\r\n        this.config = config;\r\n        this.currentDate = new Date();\r\n        this.firstDayOfWeek = this.localeValues.firstDayOfWeek;\r\n        this.onDateChange = new EventEmitter();\r\n        this.reset();\r\n    }\r\n    Object.defineProperty(CalendarService.prototype, \"config\", {\r\n        get: function () {\r\n            return this._config;\r\n        },\r\n        set: function (config) {\r\n            this._config = config;\r\n            config.updateBounds(this._selectedDate || this.currentDate);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarService.prototype, \"inFinalView\", {\r\n        get: function () {\r\n            return this.currentView === this.config.mappings.finalView;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarService.prototype, \"selectedDate\", {\r\n        get: function () {\r\n            return this._selectedDate;\r\n        },\r\n        set: function (date) {\r\n            if (date) {\r\n                this._selectedDate = DateUtil.clone(date);\r\n                this.currentDate = DateUtil.clone(date);\r\n            }\r\n            else {\r\n                this._selectedDate = undefined;\r\n            }\r\n            this.config.updateBounds(this._selectedDate || this.currentDate);\r\n            this.onManualUpdate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarService.prototype, \"minDate\", {\r\n        get: function () {\r\n            if (this._minDate && this.config.dateMinBound) {\r\n                return this._minDate > this.config.dateMinBound ? this._minDate : this.config.dateMinBound;\r\n            }\r\n            return this._minDate || this.config.dateMinBound;\r\n        },\r\n        set: function (min) {\r\n            this._minDate = min;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarService.prototype, \"maxDate\", {\r\n        get: function () {\r\n            if (this._maxDate && this.config.dateMaxBound) {\r\n                return this._maxDate < this.config.dateMaxBound ? this._maxDate : this.config.dateMaxBound;\r\n            }\r\n            return this._maxDate || this.config.dateMaxBound;\r\n        },\r\n        set: function (max) {\r\n            this._maxDate = max;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CalendarService.prototype, \"firstDayOfWeek\", {\r\n        get: function () {\r\n            return this._firstDayOfWeek;\r\n        },\r\n        set: function (firstDayOfWeek) {\r\n            if (firstDayOfWeek != undefined) {\r\n                this._firstDayOfWeek = Math.max(0, Math.min(6, firstDayOfWeek));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CalendarService.prototype.reset = function () {\r\n        this.currentView = this.config.mappings.finalView;\r\n        if (!this._selectedDate) {\r\n            var current = this.currentDate.getTime();\r\n            if (this._minDate) {\r\n                current = Math.max(current, this._minDate.getTime());\r\n            }\r\n            if (this._maxDate) {\r\n                current = Math.min(current, this._maxDate.getTime());\r\n            }\r\n            this.currentDate = new Date(current);\r\n            this.config.updateBounds(this.currentDate);\r\n            this.currentView = this.config.mappings.initialView;\r\n        }\r\n    };\r\n    CalendarService.prototype.changeDate = function (date, fromView) {\r\n        this.currentDate = date;\r\n        if (fromView === this.config.mappings.finalView) {\r\n            this.selectedDate = date;\r\n            return this.onDateChange.emit(date);\r\n        }\r\n        this.updateView(this.config.mappings.changed, fromView);\r\n    };\r\n    CalendarService.prototype.zoomOut = function (fromView) {\r\n        this.updateView(this.config.mappings.zoom, fromView);\r\n    };\r\n    CalendarService.prototype.updateView = function (mappings, fromView) {\r\n        var mapping = mappings.get(fromView);\r\n        if (mapping == undefined) {\r\n            throw new Error(\"Unknown view type.\");\r\n        }\r\n        this.currentView = mapping;\r\n    };\r\n    return CalendarService;\r\n}());\r\nexport { CalendarService };\r\n//# sourceMappingURL=calendar.service.js.map \r\n",null]}