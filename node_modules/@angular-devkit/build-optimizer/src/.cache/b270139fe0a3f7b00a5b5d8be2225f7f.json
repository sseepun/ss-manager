{"remainingRequest":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\dropdown\\services\\dropdown.service.js","dependencies":[{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\ng2-semantic-ui\\dist\\modules\\dropdown\\services\\dropdown.service.js","mtime":1521243576000},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527053443986},{"path":"C:\\Users\\Sarun Seepun\\Desktop\\AngularProject\\SSmanager\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { EventEmitter } from \"@angular/core\";\r\n// Creates essentially a 'string' enum.\r\nexport var DropdownAutoCloseType = {\r\n    ItemClick: \"itemClick\",\r\n    OutsideClick: \"outsideClick\",\r\n    Disabled: \"disabled\"\r\n};\r\nvar DropdownService = /*@__PURE__*/ (function () {\r\n    function DropdownService(autoCloseMode) {\r\n        if (autoCloseMode === void 0) {\r\n            autoCloseMode = DropdownAutoCloseType.ItemClick;\r\n        }\r\n        this.isOpen = false;\r\n        this.isOpenChange = new EventEmitter();\r\n        this.isDisabled = false;\r\n        this.autoCloseMode = autoCloseMode;\r\n        this.children = [];\r\n    }\r\n    Object.defineProperty(DropdownService.prototype, \"isNested\", {\r\n        get: function () {\r\n            return !!this.parent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DropdownService.prototype.setOpenState = function (isOpen, reflectInParent) {\r\n        var _this = this;\r\n        if (reflectInParent === void 0) {\r\n            reflectInParent = false;\r\n        }\r\n        if (this.isOpen !== isOpen && !this.isDisabled) {\r\n            // Only update the state if it has changed, and the dropdown isn't disabled.\r\n            this.isOpen = !!isOpen;\r\n            this.isAnimating = true;\r\n            // We must delay the emitting to avoid the 'changed after checked' Angular errors.\r\n            this.delay(function () { return _this.isOpenChange.emit(_this.isOpen); });\r\n            if (!this.isOpen) {\r\n                // Close the child dropdowns when this one closes.\r\n                this.children.forEach(function (c) { return c.setOpenState(_this.isOpen); });\r\n            }\r\n            if (this.parent && reflectInParent) {\r\n                // Open the parent dropdowns when this one opens.\r\n                this.parent.setOpenState(this.isOpen, true);\r\n            }\r\n        }\r\n        else if (this.isOpen !== isOpen && this.isDisabled) {\r\n            // If the state has changed, but the dropdown is disabled, re-emit the original isOpen value.\r\n            this.delay(function () { return _this.isOpenChange.emit(_this.isOpen); });\r\n        }\r\n    };\r\n    DropdownService.prototype.setDisabledState = function (isDisabled) {\r\n        if (this.isDisabled !== isDisabled) {\r\n            if (!!isDisabled) {\r\n                // Close the dropdown as it is now disabled\r\n                this.setOpenState(false);\r\n            }\r\n            this.isDisabled = !!isDisabled;\r\n        }\r\n    };\r\n    DropdownService.prototype.toggleOpenState = function () {\r\n        this.setOpenState(!this.isOpen);\r\n    };\r\n    // Registers a dropdown service as a child of this service.\r\n    // Registers a dropdown service as a child of this service.\r\n    DropdownService.prototype.registerChild =\r\n        // Registers a dropdown service as a child of this service.\r\n        function (child) {\r\n            if (!this.isChildRegistered(child)) {\r\n                this.children.push(child);\r\n                child.parent = this;\r\n            }\r\n        };\r\n    // Recursive method to check if the provided dropdown is already registered as a child, or is a descendant of a child.\r\n    // Recursive method to check if the provided dropdown is already registered as a child, or is a descendant of a child.\r\n    DropdownService.prototype.isChildRegistered =\r\n        // Recursive method to check if the provided dropdown is already registered as a child, or is a descendant of a child.\r\n        function (child) {\r\n            return this === child || !!this.children\r\n                .find(function (c) {\r\n                return !!c.children\r\n                    .find(function (cChild) { return cChild.isChildRegistered(child); });\r\n            });\r\n        };\r\n    // Wipes any nested data, so all services can be cleanly reattached.\r\n    // Wipes any nested data, so all services can be cleanly reattached.\r\n    DropdownService.prototype.clearChildren =\r\n        // Wipes any nested data, so all services can be cleanly reattached.\r\n        function () {\r\n            this.children.forEach(function (c) {\r\n                c.parent = undefined;\r\n            });\r\n            this.children = [];\r\n        };\r\n    // Method for delaying an event into the next tick, to avoid Angular \"changed after checked\" error.\r\n    // Method for delaying an event into the next tick, to avoid Angular \"changed after checked\" error.\r\n    DropdownService.prototype.delay =\r\n        // Method for delaying an event into the next tick, to avoid Angular \"changed after checked\" error.\r\n        function (callback) {\r\n            setTimeout(function () { return callback(); });\r\n        };\r\n    return DropdownService;\r\n}());\r\nexport { DropdownService };\r\n//# sourceMappingURL=dropdown.service.js.map \r\n",null]}